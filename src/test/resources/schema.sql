DROP TABLE IF EXISTS PUBLIC.FRIENDSHIP;
DROP TABLE IF EXISTS PUBLIC.GENRE_FILM;
DROP TABLE IF EXISTS PUBLIC.LIKES;
DROP TABLE IF EXISTS PUBLIC."USER";
DROP TABLE IF EXISTS PUBLIC.FILM;
DROP TABLE IF EXISTS PUBLIC.GENRE;

CREATE TABLE IF NOT EXISTS "USER" (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LOGIN VARCHAR(50)  NOT NULL,
    NAME VARCHAR(100)  NULL,
    EMAIL VARCHAR(100)  NOT NULL,
    BIRTHDAY DATE  NOT NULL,
    CONSTRAINT PK_USER PRIMARY KEY (
        ID
    )
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    REQUESTER_ID INTEGER   NOT NULL,
    RESPONDER_ID INTEGER   NOT NULL,
    --CONFIRMED BOOLEAN   NOT NULL,
    CONSTRAINT PK_FRIENDSHIP PRIMARY KEY (
        ID
     )
);

CREATE TABLE IF NOT EXISTS FILM (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(100)   NOT NULL,
    DESCRIPTION VARCHAR(200)   NOT NULL,
    RELEASE_DATE DATE   NOT NULL,
    DURATION INT   NOT NULL,
    MPA_ID INT,
    CONSTRAINT PK_FILM PRIMARY KEY (
        ID
     )
);

CREATE TABLE IF NOT EXISTS LIKES (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID INT   NOT NULL,
    FILM_ID INT   NOT NULL,
    CONSTRAINT PK_LIKES PRIMARY KEY (
        ID
     )
);

CREATE TABLE IF NOT EXISTS GENRE (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(50)   NOT NULL,
    CONSTRAINT PK_GENRE PRIMARY KEY (
        ID
     )
);

CREATE TABLE IF NOT EXISTS GENRE_FILM (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE_ID INT   NOT NULL,
    FILM_ID INT   NOT NULL,
    CONSTRAINT PK_GENRE_FILM PRIMARY KEY (
        ID
     )
);

CREATE TABLE IF NOT EXISTS MPA (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(10) NOT NULL,
    CONSTRAINT PK_MPA PRIMARY KEY (ID)
    );

ALTER TABLE FILM ADD CONSTRAINT IF NOT EXISTS FK_MPA_ID FOREIGN KEY(MPA_ID)
REFERENCES MPA (ID);

ALTER TABLE FRIENDSHIP ADD CONSTRAINT IF NOT EXISTS FK_FRIENDSHIP_REQUESTER_ID FOREIGN KEY(REQUESTER_ID)
REFERENCES "USER" (ID);

ALTER TABLE FRIENDSHIP ADD CONSTRAINT IF NOT EXISTS FK_FRIENDSHIP_RESPONDER_ID FOREIGN KEY(RESPONDER_ID)
REFERENCES "USER" (ID);

ALTER TABLE LIKES ADD CONSTRAINT IF NOT EXISTS FK_LIKES_USER_ID FOREIGN KEY(USER_ID)
REFERENCES "USER" (ID);

ALTER TABLE LIKES ADD CONSTRAINT IF NOT EXISTS FK_LIKES_FILM_ID FOREIGN KEY(FILM_ID)
REFERENCES FILM (ID);

ALTER TABLE GENRE_FILM ADD CONSTRAINT IF NOT EXISTS FK_GENRE_FILM_GENRE_ID FOREIGN KEY(GENRE_ID)
REFERENCES GENRE (ID);

ALTER TABLE GENRE_FILM ADD CONSTRAINT IF NOT EXISTS FK_GENRE_FILM_FILM_ID FOREIGN KEY(FILM_ID)
REFERENCES FILM (ID);

